from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from django.contrib.auth.password_validation import validate_password
from django.db import transaction
from .models import User, UserProfile

User = get_user_model()


class UserProfileSerializer(serializers.ModelSerializer):
    """Handles nested profile fields inside registration"""
    class Meta:
        model = UserProfile
        fields = (
            "phone_number",
            "bank_account_number",
            "ifsc_code",
            "address_line_1",
            "address_line_2",
            "city",
            "state",
            "pin_code",
            "date_of_birth",
            "pan_number",
            "aadhaar_number",
        )


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, validators=[validate_password])
    password_confirm = serializers.CharField(write_only=True, required=True)
    profile = UserProfileSerializer(required=True)  # Expect a nested profile object

    class Meta:
        model = User
        fields = (
            "id",
            "username",
            "email",
            "password",
            "password_confirm",
            "role",
            "profile",
        )
        extra_kwargs = {
            "email": {"required": True},
            "role": {"required": False},  # Default to USER
        }

    def validate(self, data):
        # Password confirmation
        if data["password"] != data["password_confirm"]:
            raise serializers.ValidationError({"password": "Passwords do not match."})

        data.pop("password_confirm")

        # Role restrictions
        request = self.context.get("request")
        role = data.get("role", "USER")
        if role == "ADMIN":
            if not request or not request.user.is_authenticated or request.user.role != "ADMIN":
                raise serializers.ValidationError(
                    {"role": "Only admins can create admin accounts."}
                )

        return data

    def validate_role(self, value):
        valid_roles = [choice[0] for choice in User.ROLE_CHOICES]
        if value not in valid_roles:
            raise serializers.ValidationError(
                f"Invalid role. Must be one of: {', '.join(valid_roles)}"
            )
        return value

    @transaction.atomic
    def create(self, validated_data):
        profile_data = validated_data.pop("profile", {})
        password = validated_data.pop("password")

        # Create user (inactive until admin approves)
        user = User(
            username=validated_data["username"],
            email=validated_data.get("email", ""),
            role=validated_data.get("role", "USER"),
        )
        user.set_password(password)
        user.is_active = False  # Block login until admin approval
        user.save()

        # Create linked profile with status PENDING
        UserProfile.objects.create(user=user, status="PENDING", **profile_data)

        return user


class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    """Extend JWT serializer to include username + role in response"""
    def validate(self, attrs):
        data = super().validate(attrs)
        data["username"] = self.user.username
        data["role"] = self.user.role
        data["user_id"] = self.user.id
        return data


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = get_user_model()
        fields = ["id", "username", "email", "role", "date_joined", "is_active"]
        read_only_fields = ["id", "date_joined", "is_active"]


class UserRegistrationSerializer(serializers.ModelSerializer):
    """(Optional) older simple serializer â€” can remove if unused"""
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ("id", "username", "email", "password", "role")

    def create(self, validated_data):
        password = validated_data.pop("password")
        user = User(**validated_data)
        user.set_password(password)
        user.save()
        return user

-----------------------------------------

from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from django.contrib.auth.password_validation import validate_password
from .models import User

User = get_user_model()

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, validators=[validate_password])
    password_confirm = serializers.CharField(write_only=True, required=True)  # Add password confirmation

    class Meta:
        model = User
        fields = ("id", "username", "email", "password", "password_confirm", "role")
        extra_kwargs = {
            "email": {"required": False},
            "role": {"required": False},  # Make role optional
        }

    def validate(self, data):
        # Check if passwords match
        if data['password'] != data['password_confirm']:
            raise serializers.ValidationError({"password": "Passwords do not match."})
        
        # Remove password_confirm from validated data as we don't need to save it
        data.pop('password_confirm')
        
        # Check role permissions
        request = self.context.get('request')
        role = data.get('role', 'USER')
        
        # Only allow admins to create admin accounts
        if role == "ADMIN":
            if not request or not request.user.is_authenticated or request.user.role != "ADMIN":
                raise serializers.ValidationError({"role": "Only admins can create admin accounts."})
        
        return data

    def validate_role(self, value):
        # Ensure role is valid
        valid_roles = [choice[0] for choice in User.ROLE_CHOICES]
        if value not in valid_roles:
            raise serializers.ValidationError(f"Invalid role. Must be one of: {', '.join(valid_roles)}")
        return value

    def create(self, validated_data):
        user = User.objects.create_user( 
            username=validated_data["username"],
            email=validated_data.get("email", ""),
            password=validated_data["password"],
            role=validated_data.get("role", "USER"),
        )
        return user


class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    """
    Extend the default Token serializer to include username + role in the response.
    """
    def validate(self, attrs):
        data = super().validate(attrs)
        data["username"] = self.user.username
        data["role"] = self.user.role
        data["user_id"] = self.user.id
        return data


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = get_user_model()
        fields = ['id', 'username', 'email', 'role', 'date_joined', 'is_active']
        read_only_fields = ['id', 'date_joined', 'is_active']  # These fields should not be editable


class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'password', 'role')  # add/remove fields as needed

    def create(self, validated_data):
        password = validated_data.pop('password')
        user = User(**validated_data)
        user.set_password(password)
        user.save()
        return user